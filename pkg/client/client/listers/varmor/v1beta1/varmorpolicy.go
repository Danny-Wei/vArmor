/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/bytedance/vArmor/apis/varmor/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VarmorPolicyLister helps list VarmorPolicies.
// All objects returned here must be treated as read-only.
type VarmorPolicyLister interface {
	// List lists all VarmorPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.VarmorPolicy, err error)
	// VarmorPolicies returns an object that can list and get VarmorPolicies.
	VarmorPolicies(namespace string) VarmorPolicyNamespaceLister
	VarmorPolicyListerExpansion
}

// varmorPolicyLister implements the VarmorPolicyLister interface.
type varmorPolicyLister struct {
	indexer cache.Indexer
}

// NewVarmorPolicyLister returns a new VarmorPolicyLister.
func NewVarmorPolicyLister(indexer cache.Indexer) VarmorPolicyLister {
	return &varmorPolicyLister{indexer: indexer}
}

// List lists all VarmorPolicies in the indexer.
func (s *varmorPolicyLister) List(selector labels.Selector) (ret []*v1beta1.VarmorPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.VarmorPolicy))
	})
	return ret, err
}

// VarmorPolicies returns an object that can list and get VarmorPolicies.
func (s *varmorPolicyLister) VarmorPolicies(namespace string) VarmorPolicyNamespaceLister {
	return varmorPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VarmorPolicyNamespaceLister helps list and get VarmorPolicies.
// All objects returned here must be treated as read-only.
type VarmorPolicyNamespaceLister interface {
	// List lists all VarmorPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.VarmorPolicy, err error)
	// Get retrieves the VarmorPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.VarmorPolicy, error)
	VarmorPolicyNamespaceListerExpansion
}

// varmorPolicyNamespaceLister implements the VarmorPolicyNamespaceLister
// interface.
type varmorPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VarmorPolicies in the indexer for a given namespace.
func (s varmorPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.VarmorPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.VarmorPolicy))
	})
	return ret, err
}

// Get retrieves the VarmorPolicy from the indexer for a given namespace and name.
func (s varmorPolicyNamespaceLister) Get(name string) (*v1beta1.VarmorPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("varmorpolicy"), name)
	}
	return obj.(*v1beta1.VarmorPolicy), nil
}
