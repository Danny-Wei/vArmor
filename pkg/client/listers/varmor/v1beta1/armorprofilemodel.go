/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/bytedance/vArmor/apis/varmor/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ArmorProfileModelLister helps list ArmorProfileModels.
// All objects returned here must be treated as read-only.
type ArmorProfileModelLister interface {
	// List lists all ArmorProfileModels in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.ArmorProfileModel, err error)
	// ArmorProfileModels returns an object that can list and get ArmorProfileModels.
	ArmorProfileModels(namespace string) ArmorProfileModelNamespaceLister
	ArmorProfileModelListerExpansion
}

// armorProfileModelLister implements the ArmorProfileModelLister interface.
type armorProfileModelLister struct {
	indexer cache.Indexer
}

// NewArmorProfileModelLister returns a new ArmorProfileModelLister.
func NewArmorProfileModelLister(indexer cache.Indexer) ArmorProfileModelLister {
	return &armorProfileModelLister{indexer: indexer}
}

// List lists all ArmorProfileModels in the indexer.
func (s *armorProfileModelLister) List(selector labels.Selector) (ret []*v1beta1.ArmorProfileModel, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ArmorProfileModel))
	})
	return ret, err
}

// ArmorProfileModels returns an object that can list and get ArmorProfileModels.
func (s *armorProfileModelLister) ArmorProfileModels(namespace string) ArmorProfileModelNamespaceLister {
	return armorProfileModelNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ArmorProfileModelNamespaceLister helps list and get ArmorProfileModels.
// All objects returned here must be treated as read-only.
type ArmorProfileModelNamespaceLister interface {
	// List lists all ArmorProfileModels in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.ArmorProfileModel, err error)
	// Get retrieves the ArmorProfileModel from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.ArmorProfileModel, error)
	ArmorProfileModelNamespaceListerExpansion
}

// armorProfileModelNamespaceLister implements the ArmorProfileModelNamespaceLister
// interface.
type armorProfileModelNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ArmorProfileModels in the indexer for a given namespace.
func (s armorProfileModelNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.ArmorProfileModel, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ArmorProfileModel))
	})
	return ret, err
}

// Get retrieves the ArmorProfileModel from the indexer for a given namespace and name.
func (s armorProfileModelNamespaceLister) Get(name string) (*v1beta1.ArmorProfileModel, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("armorprofilemodel"), name)
	}
	return obj.(*v1beta1.ArmorProfileModel), nil
}
